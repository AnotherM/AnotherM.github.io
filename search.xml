<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Archieved</title>
    <url>/2018/12/01/Archieved/</url>
    <content><![CDATA[<html><head></head><body><blockquote><p>2016/11/21-2017/04/07 期间学习总结已经归档不可访问<br><br>此博客内容已经接近全面更新</p></blockquote></body></html>]]></content>
      <categories>
        <category>Notice</category>
      </categories>
      <tags>
        <tag>Something</tag>
      </tags>
  </entry>
  <entry>
    <title>博客界面效果小更新</title>
    <url>/2017/04/04/BlogUpdateA/</url>
    <content><![CDATA[<html><head></head><body><p>因<del><a href="http://dev.duoshuo.com/threads/58d1169ae293b89a20c57241">多说评论系统关闭</a></del>，所以整了整网页，准备取消多说服务，顺便翻了翻我现在正在使用的<a href="http://theme-next.iissnan.com/">NexT主题</a>，发现主题作者更新了，尤其意外的发现添加了<a href="https://github.com/hustcc/canvas-nest.js">canvas nest</a>这个动态背景效果，于是连带Hexo一起更新了一下</p><p><del>目前使用的背景为NexT的three_wave，具体可在作者主题文档找到</del></p><p>至于评论系统，反正也没人评论，所以干脆不弄了</p><p><font color="green">2018.12.01更新：多说已经关闭，而且canvas_line这个特效好炫酷，至于评论系统，嗯，洗洗睡吧😂,然后<a href="https://github.com/theme-next/hexo-theme-next">NexT主题</a>已经交由<a href="https://github.com/theme-next">NexT组织</a>更新，目前版本6.0</font></p></body></html>]]></content>
      <categories>
        <category>Notice</category>
      </categories>
      <tags>
        <tag>Something BlogUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>博客界面效果小更新（二）</title>
    <url>/2019/04/14/BlogUpdateB/</url>
    <content><![CDATA[<html><head></head><body><h2 id="严格地说，这篇文章，应该属于想到什么写什么，鉴于有点偷懒，基本就是全贴图算了"><a href="#严格地说，这篇文章，应该属于想到什么写什么，鉴于有点偷懒，基本就是全贴图算了" class="headerlink" title="严格地说，这篇文章，应该属于想到什么写什么，鉴于有点偷懒，基本就是全贴图算了"></a>严格地说，这篇文章，应该属于想到什么写什么，鉴于有点偷懒，基本就是全贴图算了</h2><ul><li>Next主题更新7.0.1：<a href="https://theme-next.org/">Theme-Next</a></li><li>Git分支合并以及merge upstream：<img alt="1" data-src="/images/blog-update/1.png">)<br><img alt="2" data-src="/images/blog-update/2.png"></li><li>Git Syncing a fork: <a href="https://help.github.com/en/articles/syncing-a-fork">Syncing a fork</a></li><li>Git给fork配置upstream: <a href="https://help.github.com/en/articles/configuring-a-remote-for-a-fork">Configuring a remote for a fork</a><a id="more"></a></li><li>加入Gitment: <a href="https://github.com/imsun/gitment">Gitment is a comment system based on GitHub Issues</a></li><li>更新avatar： <img alt="0" data-src="/images/avatar.jpg"></li></ul></body></html>]]></content>
      <categories>
        <category>Notice</category>
      </categories>
      <tags>
        <tag>Something BlogUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>博客界面效果小更新（三）</title>
    <url>/2019/12/31/BlogUpdateC/</url>
    <content><![CDATA[<html><head></head><body><h2 id="本打算迁移Hexo到Jekyll，奈何试了接近半个月，易用性还是不如Hexo"><a href="#本打算迁移Hexo到Jekyll，奈何试了接近半个月，易用性还是不如Hexo" class="headerlink" title="本打算迁移Hexo到Jekyll，奈何试了接近半个月，易用性还是不如Hexo"></a>本打算迁移Hexo到<a href="https://jekyllrb.com/">Jekyll</a>，奈何试了接近半个月，易用性还是不如Hexo</h2><ul><li><p>Next主题更新7.6.0：<a href="https://theme-next.org/">Theme-Next</a> 自己自定义Next-Theme的U上有仓库已删除</p><a id="more"></a></li><li><p><del>加入Gitment: <a href="https://github.com/imsun/gitment">Gitment is a comment system based on GitHub Issues</a></del> 更新为<a href="https://gitalk.github.io/">Gitalk</a></p></li><li><p>更新avatar：<img width="256" height="256/" data-src="/images/avatar.jpg"></p></li><li><p>上一个版本：<img width="256" height="256/" data-src="/images/avatar_old.jpg"></p></li></ul></body></html>]]></content>
      <categories>
        <category>Notice</category>
      </categories>
      <tags>
        <tag>Something BlogUpdate</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(1)</title>
    <url>/2019/02/24/LearnPython-1/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记</b></font></p><blockquote><p>坑了很长时间，2019/2/24，推翻重构，本章主要记录Python学习概览<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.2</p></blockquote><blockquote><p>本笔记所有内容均来源于北京理工大学嵩天的《Python程序语言设计》</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h2 id="Python格式框架"><a href="#Python格式框架" class="headerlink" title="Python格式框架"></a>Python格式框架</h2><ul><li>严格缩进：<strong>有道是：让Python程序员最疯狂的是什么？那就是给他的代码随便加个空格</strong></li><li>Python没有花括号和分号，所以对格式就是严格要求，正是因为格式，Python的代码显得干净整洁</li><li>单一程序内，缩进严格要求为N个空格或者N个Tab键，N为正整数并且单一程序内N的值不能改变（若缩进为4个空格，则单一程序内缩进需要全部使用4个空格）</li><li>Python有两种注释：使用<code>#</code>作为单行注释，使用<code>''' '''</code>作为多行注释</li></ul><h2 id="Python关键字（2019-6-19更新）"><a href="#Python关键字（2019-6-19更新）" class="headerlink" title="Python关键字（2019/6/19更新）"></a>Python关键字（2019/6/19更新）</h2><blockquote><p>使用<code>import keyword</code>与<code>keyword.kwlist</code>查看保留字</p></blockquote><p>关键字|说明<br>—|—|—</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">```None```|特殊空值，不为0，不等于' '</span><br><span class="line">```True```|为真判定，首字母大写固定</span><br><span class="line">```and```|逻辑与运算，```a and b```类似于```a && b</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>```import tensorflow as tf```</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```assert```|断言，用于检查单个条件，为假抛出AssertionError</span><br><span class="line">```async```|与```def```结合使用，包装函数为异步函数```async def function(): pass</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>def function(): pass```中使用```await function()```，暂停协程的执行</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```break```|跳出整个循环</span><br><span class="line">```class```|创建类，包含```def```，面向对象编程思想</span><br><span class="line">```continue```|跳出单个循环</span><br><span class="line">```def```|创建函数，类似于void，包含```return</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>list[0]```为删除list中第一个元素</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```elif```|```if(){} else if(){}```中的```else if</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>else{}```中的```else```，可用于异常捕获，在不出现异常时候执行```else``中的代码</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```except```|```try{} catch(Exception e){}```中的```catch```，在出现异常时侯执行```except```中的代码</span><br><span class="line">```finally```|```try{} catch(Exception e){} finally{}```中的```finally```，不管是否出现异常都执行```finally```中的代码</span><br><span class="line">```for```|循环，结合```in```使用， ```for a in range(30):</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>datetime import datetime```</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```global```|在```def```中使用，用于调用全局变量并且在不改变原值的情况下赋值</span><br><span class="line">```if```|```if(){} else{}```中的```if</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>datetime```</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```in```|与```for```结合使用</span><br><span class="line">```is```|判断两个变量是否引用同一对象，```a=1 b=1 print(a is b) #True</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>x:x+1```类似于```int x</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```nonlocal```|将函数内局部变量非全局变量的局部变量，用于单个方法或函数内部私有化变量调用</span><br><span class="line">```not```|逻辑非运算，```if not (a and b)```类似于```if(!a && b)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>or b```类似于``` a || b ```</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">```pass```|占位关键字，填充报错信息，```try: xxx except: pass</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">```return```|与```def```结合使用，用于退出函数、返回表达式、参数值</span><br><span class="line">```try```|```try: xxx except: pass```中的```try</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">```with```|可结合```as```使用，用于上下文支持，```with open(r'fileName') as f: pass</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## Python字符操作</span><br><span class="line">* Python字符拥有编号：**正向递增序号**：从左到右从0开始递增，**反向递减序号：**从右到左从-1开始递减</span><br><span class="line">* 使用```<Str>[M]```对字符串进行索引，如```"Str[-1]"```为字符串从右到左数第一个字符</span><br><span class="line">* 使用```<Str>[M:N]```对字符串进行切片，如```Str[1:3]```就是从左数第2个字符和第3个字符，但不到第4个字符（从左往右数从0开始），使用```Str[0:-2]```则为从左到右除了倒数第二个字符以外全部保留</span><br><span class="line"></span><br><span class="line">## Python列表</span><br><span class="line">* 列表使用```[]```表示，如```['A','a']```为一个包含两个元素的列表，使用```Str in ['A','a']```来判断Str中是否有匹配元素```A```或```a</span><br></pre></td></tr></tbody></table></figure><h2 id="Python判断"><a href="#Python判断" class="headerlink" title="Python判断"></a>Python判断</h2><ul><li>Python判断中的<code>else</code>为<code>elif</code>，使用冒号以及冒号以后的缩进语句构成分支判断条件</li></ul><h2 id="Python输入输出"><a href="#Python输入输出" class="headerlink" title="Python输入输出"></a>Python输入输出</h2><ul><li>Python使用<code>input()</code>函数进行输入，如<code>Str = input("请输入")</code></li><li>Python使用<code>print()</code>函数进行输出，其中字符串格式化如<code>print(Str{:.2f}".format(A))</code>其中<code>format()</code>方法用于将<code>A</code>的值填充到<code>{}</code>中，<code>:.2f</code>用于格式化字符串<code>A</code>为小数点后两位</li><li><code>eval()</code>函数，用于去掉表达式外侧引号并执行余下的函数，如<code>eval("1")</code>输出结果为<code>1</code>而不是<code>"1"</code>，而<code>eval("1+2")</code>输出结果为<code>3</code>，若<code>eval('"1+2"')</code>则输出结果为<code>'1+2'</code>，其中<code>eval("'1+2'")</code>输出结果也为<code>'1+2'</code>，因为在Python中，单引号与双引号只是为了避免转义字符，即无需使用<code>\</code>进行转义，同理，若<code>eval('print("hello")')</code>输出为<code>hello</code>，也就是执行了<code>print()</code>函数</li></ul><h1 id="Turtle库的使用"><a href="#Turtle库的使用" class="headerlink" title="Turtle库的使用"></a>Turtle库的使用</h1><h2 id="使用Turtle画彩虹（2019-6-20更新）"><a href="#使用Turtle画彩虹（2019-6-20更新）" class="headerlink" title="使用Turtle画彩虹（2019/6/20更新）"></a>使用Turtle画彩虹（2019/6/20更新）</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(x, y, z, speed)</span>:</span></span><br><span class="line">    t.setup(x, y)</span><br><span class="line">    t.pensize(z)</span><br><span class="line">    t.speed(speed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    t.penup()</span><br><span class="line">    t.setx(start)</span><br><span class="line">    t.sety(end)</span><br><span class="line">    t.pendown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(color, position, radius, extend)</span>:</span></span><br><span class="line">    t.pendown()</span><br><span class="line">    t.left(position)</span><br><span class="line">    t.color(color)</span><br><span class="line">    t.circle(radius, extend)</span><br><span class="line">    t.penup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init(<span class="number">800</span>, <span class="number">800</span>, <span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">start(<span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'red'</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">120</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'orange'</span>, <span class="number">180</span>, <span class="number">120</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">140</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'yellow'</span>, <span class="number">180</span>, <span class="number">140</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'green'</span>, <span class="number">180</span>, <span class="number">160</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">180</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'cyan'</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'blue'</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>)</span><br><span class="line">start(<span class="number">220</span>, <span class="number">0</span>)</span><br><span class="line">draw(<span class="string">'purple'</span>, <span class="number">180</span>, <span class="number">220</span>, <span class="number">180</span>)</span><br><span class="line">t.done()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask初探</title>
    <url>/2018/11/19/FlaskTest/</url>
    <content><![CDATA[<html><head></head><body><h1 id="Flask初探"><a href="#Flask初探" class="headerlink" title="Flask初探"></a><b>Flask初探</b></h1><p>昨天花时间研究了一下Spring与SpringBoot相关的知识，然后过了一天，整个人就是这种感觉:</p><p><font color="red"><strong>你脑袋有毛病我不想和你玩</strong></font></p><p>今天看了看Flask</p><p>然后就有了这篇文章的标题—-<b>Flask初探</b></p><p>关于这篇文章的内容呢，就是教你用9行写出一个网站</p><a id="more"></a><p><font style="font-size:32px;font-family:幼圆">所以：</font></p><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>First: 你会用电脑</li><li>Second: 你会装Python并且会添加环境变量</li><li>Third: 你会用cmd</li></ul><p><font style="font-size:32px;font-family:幼圆">如果这些你都不具备的话那还是洗洗睡吧</font></p><hr><h3 id="接下来是正文"><a href="#接下来是正文" class="headerlink" title="接下来是正文"></a>接下来是正文</h3><ol><li>在以上条件都具备之后，打开cmd，执行pip install flask</li><li>新建一个后缀名为.py的文件</li><li>打开.py这个文件</li><li>写入<br></li></ol><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'fxckUJava'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>用cmd找到这个文件（cd命令）</li><li>使用python xxx .py(xxx为你的文件名)，出现下图后，打开浏览器，访问127.0.0.1:5000<ul><li>如果看不到任何东西或者页面没反应的话，恩，从头看看哪里搞错了吧<img witdh="auto" height="auto" data-src="/images/flask.png"></li></ul></li></ol><p>附：<a href="http://flask.pocoo.org">Flask官网</a> <a href="https://www.python.org/">Python官网</a></p></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>桌面美化</title>
    <url>/2019/04/12/DesktopEffect/</url>
    <content><![CDATA[<html><head></head><body><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p><a href="https://www.wallpaperengine.io/">Wallpaper Engine</a></p><p><a href="https://www.microsoft.com/zh-cn/p/translucenttb/9pf4kz2vn4w9">TranslucentTB</a></p><p><a href="https://www.rainmeter.net/">Rainmeter</a></p><p><a href="https://guanjia.qq.com/product/zmzl/">腾讯桌面整理</a></p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><a href="https://www.deviantart.com/novasev/art/Simply-Nova-267726929">Rainmeter－SimpleNova</a></p><p><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1463562239">WallpaperEngine－「ー」/「しおん」</a></p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><video controls width="100%" src="/images/desktop.mp4">Your browser does not support the video tag.</video></p></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian-Keyring</title>
    <url>/2018/12/06/Debian-Keyring/</url>
    <content><![CDATA[<html><head></head><body><h1 id="这次的标题是-🤦‍"><a href="#这次的标题是-🤦‍" class="headerlink" title="这次的标题是 🤦‍"></a>这次的标题是 🤦‍</h1><p>登陆SSH，使用<code>apt update</code>更新一下软件包，然后提示<code>NO_PUBKEY XXXXXXXXXXXXXXXX</code><br><img alt data-src="/images/debian-gpg/d01.png"><br>随即各种搜索，提示都是一致的提示使用<code>gpg --keyserver keyring.debian.com --recv-keys</code></p><p>输入之后，再次使用<code>apt update</code>报错依旧</p><p>然后查了一下还需要<code>gpg --armor --export XXXXXXXX | apt-key add -</code></p><p>使用之后，报错依旧</p><p>然后找到了一个网页上说删除<code>debian-archive-keyring</code>这个包然后使用<code>apt --fix-broken install</code>就好了</p><p>系统提示<strong>Please input the phrase: Yes, do as I say!</strong>，犹豫了一下<br>……<br><code>Ctrl + C</code><br>……<br>找了一会儿依然修不好</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">apt remove debian-archive-keyring</span><br><span class="line">Yes, do as I say!</span><br></pre></td></tr></tbody></table></figure><p><font size="10em" color="red">然后……</font></p><a id="more"></a><p><img alt data-src="/images/debian-gpg/d02.png"></p><p style="font-size:5em;text-align:center">我就这个表情：</p><p style="font-size:10em;text-align:center">😐</p><p>看了一下<code>dpkg --help</code>，有输出</p><p>随即</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget http://ftp.debian.org/debian/pool/main/a/apt/apt_1.4.8_amd64.deb`</span><br><span class="line">dpkg -i apt_1.4.8_amd64.deb</span><br></pre></td></tr></tbody></table></figure><p>提示</p><blockquote><p>dpkg: dependency problems prevent configuration of apt:<br>apt depends on debian-archive-keyring; however:<br>Package debian-archive-keyring is not installed.`</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">wget http://ftp.debian.org/debian/pool/main/d/debian-archive-keyring/debian-archive-keyring_2017.5_all.deb</span><br><span class="line">dpkg -i debian-archive-keyring_2017.5_all.deb</span><br><span class="line">dpkg -i dpkg -i apt_1.4.8_amd64.deb</span><br><span class="line">apt update</span><br></pre></td></tr></tbody></table></figure><p>依然报错<code>NO_PUBKEY XXXXXXXXXXXXXXXX</code></p><p>然后想起来彻底删除一下<br><code>apt purge debian-archive-keyring</code><br>提示</p><blockquote><p>while removing debian-archive-keyring, directory >’/etc/apt/trusted.gpg.d’ not empty so not removed<br>执行</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rm -r /etc/apt/trusted.gpg.d</span><br><span class="line">dpkg -i debian-archive-keyring_2017.5_all.deb</span><br><span class="line">dpkg -i dpkg -i apt_1.4.8_amd64.deb</span><br><span class="line">apt update</span><br></pre></td></tr></tbody></table></figure><p><img alt data-src="/images/debian-gpg/d03.png"></p><p style="font-size:10em;text-align:center">🙃</p><p style="font-size:5em;text-align:center">希望帮到有用的人</p></body></html>]]></content>
      <categories>
        <category>学习中遇到的坑</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(2)</title>
    <url>/2019/06/19/LearnPython-2/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记2</b></font></p><blockquote><p>忙了三个月毕设，2019/6/19，继续编写，本章主要记录Python数字类型及操作、字符串类型及操作、Time库的使用<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="数字类型操作"><a href="#数字类型操作" class="headerlink" title="数字类型操作"></a>数字类型操作</h1><h2 id="Python整数类型"><a href="#Python整数类型" class="headerlink" title="Python整数类型"></a>Python整数类型</h2><ul><li>十进制<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">decimal_1 = <span class="number">123</span></span><br><span class="line">decimal_2 = <span class="number">29</span></span><br><span class="line">decimal_3 = <span class="number">-127</span></span><br></pre></td></tr></tbody></table></figure></li><li>二进制，以0b或0B开头<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">binary_1 = <span class="number">0b010</span></span><br><span class="line">binary_2 = <span class="number">-0</span>B101</span><br></pre></td></tr></tbody></table></figure></li><li>八进制 以0o或者0O开头<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">octal_1 = <span class="number">0o123</span></span><br><span class="line">octal_2 = <span class="number">-0</span>O345</span><br></pre></td></tr></tbody></table></figure></li><li>十六进制 以0x或者0X开头<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">hexadecimal_1 = <span class="number">0x9a</span></span><br><span class="line">hexadecimal_2 = <span class="number">-0X89</span></span><br></pre></td></tr></tbody></table></figure><h2 id="浮点数-取值范围数量级约-10-308至10-308，精度数量级10-16"><a href="#浮点数-取值范围数量级约-10-308至10-308，精度数量级10-16" class="headerlink" title="浮点数 取值范围数量级约-10^308至10^308，精度数量级10^-16"></a>浮点数 取值范围数量级约-10^308至10^308，精度数量级10^-16</h2></li><li>浮点数之间的运算存在不确定尾数，不是bug，计算机组成原理知识</li><li>计算机取0.1只能截取53位二进制表示小数部分，约为10^-16，去无限接近0.1<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(<span class="number">0.1</span> + <span class="number">0.3</span>)  <span class="comment"># 0.4</span></span><br><span class="line">print(<span class="number">0.1</span> + <span class="number">0.2</span>)  <span class="comment"># 0.30000000000000004</span></span><br><span class="line">print(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>)  <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><blockquote><p>复数定义：x^2=-1，定义j=√(-1)，a+bj被称为复数，其中，a是实部，b是虚部</p></blockquote><ul><li>只有Python提供了复数<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">z = <span class="number">1.23e-4</span> + <span class="number">5.6e+89j</span></span><br><span class="line">print(z.real)  <span class="comment"># 实部0.000123</span></span><br><span class="line">print(z.imag)  <span class="comment"># 虚部5.6e+89</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>Python中除了常规的+ - * / %还有//和<strong>，//为整数除，结果为整数商，</strong>为幂运算，幂为小数则开方运算</li><li>同时运算符也可用作赋值操作符，即x+=y x-=y x**=y<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(<span class="number">10</span> / <span class="number">3</span>)  <span class="comment"># 3.3333333333333335</span></span><br><span class="line">print(<span class="number">10</span> // <span class="number">3</span>)  <span class="comment"># 3</span></span><br><span class="line">print(<span class="number">10</span> ** <span class="number">5</span>)  <span class="comment"># 100000</span></span><br><span class="line">print(<span class="number">10</span> ** <span class="number">0.5</span>)  <span class="comment"># 3.1622776601683795</span></span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>类型之间的关系为逐渐“拓展”或“变宽”：<strong>整数→浮点数→复数</strong></p></blockquote><h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(abs(<span class="number">-10</span>))  <span class="comment"># 绝对值 10</span></span><br><span class="line">print(divmod(<span class="number">20</span>, <span class="number">7</span>))  <span class="comment"># 求商余 (x//y,x%y) (2, 6)</span></span><br><span class="line">print(pow(<span class="number">3</span>, pow(<span class="number">3</span>, <span class="number">3</span>), <span class="number">10000</span>))  <span class="comment"># 求幂余 (x**y)%z z即10000可省略 print(pow(3, 27, 10000)) 4587</span></span><br><span class="line">print(round(math.pi, <span class="number">3</span>))  <span class="comment"># 四舍五入，3为保留3位小数，默认为0可省略</span></span><br><span class="line">print(max(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">9</span>))  <span class="comment"># 最大值 9</span></span><br><span class="line">print(min(<span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>))  <span class="comment"># 最小值 1</span></span><br><span class="line">print(int(math.pi))  <span class="comment"># 舍弃小数变整数 3</span></span><br><span class="line">print(float(<span class="number">3</span>))  <span class="comment"># 将整数变为浮点数 3.0</span></span><br><span class="line">print(complex(<span class="number">5</span>))  <span class="comment"># 将某个数字变为复数并增加虚部 (5+0j)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="字符串类型操作"><a href="#字符串类型操作" class="headerlink" title="字符串类型操作"></a>字符串类型操作</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>字符串由一对单引号或一对双引号表示</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">string_1 = <span class="string">'str'</span></span><br><span class="line">string_2 = <span class="string">"string2"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>三单引号或三双引号表示多行字符串</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">string_3 = <span class="string">"""multi</span></span><br><span class="line"><span class="string">line</span></span><br><span class="line"><span class="string">string"""</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Python具备多种字符串表示方法是为了更好的处理字符串</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">string_4 = <span class="string">"""This ""is"" </span></span><br><span class="line"><span class="string">a Multi Line</span></span><br><span class="line"><span class="string">And</span></span><br><span class="line"><span class="string">'Multi Quotation Marks'</span></span><br><span class="line"><span class="string">string</span></span><br><span class="line"><span class="string"> """</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串是字符的有序序列，使用[]可以对其中的字符进行索引、切片</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(string_1[<span class="number">1</span>])  <span class="comment"># t</span></span><br><span class="line">print(string_1[<span class="number">-1</span>])  <span class="comment"># [-1]代表倒数第一位字符串 r</span></span><br><span class="line">print(string_2[<span class="number">6</span>])  <span class="comment"># 2</span></span><br><span class="line">print(string_3[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># ul</span></span><br><span class="line">print(string_4[<span class="number">0</span>:<span class="number">-12</span>])  <span class="comment"># [0:-12]代表从字符串第一位开始，输出至倒数第12位字符串</span></span><br><span class="line"><span class="comment"># this ""is""</span></span><br><span class="line"><span class="comment"># a multi line</span></span><br><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="comment"># 'multi quotation mar</span></span><br><span class="line">print(string_4[<span class="number">0</span>:<span class="number">-3</span>:<span class="number">2</span>])  <span class="comment"># [0:-3:2]代表从字符串第一位开始，输出至倒数第3位字符串，步长（跳过字符数）为1</span></span><br><span class="line"><span class="comment"># ti "s"</span></span><br><span class="line"><span class="comment">#  ut iead'ut utto ak'srn</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>转义字符</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(<span class="string">"双引号\""</span>)  <span class="comment"># 双引号 双引号"</span></span><br><span class="line">print(<span class="string">"回退1格\b"</span>)  <span class="comment"># 回退 回退1</span></span><br><span class="line">print(<span class="string">"换\n行"</span>)  <span class="comment"># 换行（光标移动到下行行首）</span></span><br><span class="line"><span class="comment"># 换</span></span><br><span class="line"><span class="comment"># 行</span></span><br><span class="line">print(<span class="string">"回\r车"</span>)  <span class="comment"># 回车（光标移动到本行行首）车</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串操作</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(string_1 + string_2)  <span class="comment"># 拼接字符串 strstring2</span></span><br><span class="line">print(string_1 * <span class="number">3</span>)  <span class="comment"># 复制3次字符串 strstrstr</span></span><br><span class="line">print(string_1 <span class="keyword">in</span> string_2)  <span class="comment"># 判断string_1是否为string_2的子串 True</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串函数</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(len(string_4))  <span class="comment"># 输出字符串长度 62</span></span><br><span class="line">print(str(<span class="number">1.234</span>), str([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 转换任意类型数据为字符串 1.234 [1, 2, 3]</span></span><br><span class="line">print(hex(<span class="number">420</span>), oct(<span class="number">420</span>))  <span class="comment"># 转换整数位十六进制或八进制的小写字符串 0x1a4 0o644</span></span><br><span class="line">print(chr(<span class="number">10004</span>))  <span class="comment"># 输出Unicode编码字符 ✔</span></span><br><span class="line">print(ord(<span class="string">"✔"</span>))  <span class="comment"># 返回Unicode编码值 10004</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串处理方法</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(string_4.upper())  <span class="comment"># 所有字母大写</span></span><br><span class="line"><span class="comment"># THIS ""IS""</span></span><br><span class="line"><span class="comment"># A MULTI LINE</span></span><br><span class="line"><span class="comment"># AND</span></span><br><span class="line"><span class="comment"># 'MULTI QUOTATION MARKS'</span></span><br><span class="line"><span class="comment"># STRING</span></span><br><span class="line">print(string_4.lower())  <span class="comment"># 所有字母小写</span></span><br><span class="line"><span class="comment"># this ""is""</span></span><br><span class="line"><span class="comment"># a multi line</span></span><br><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="comment"># 'multi quotation marks'</span></span><br><span class="line"><span class="comment"># string</span></span><br><span class="line">print(string_4.split(sep=<span class="string">" "</span>))  <span class="comment"># 使用空格分隔字符串存入列表</span></span><br><span class="line"><span class="comment"># ['This', '""is""', '\na', 'Multi', "Line\nAnd\n'Multi", 'Quotation', "Marks'\nstring\n", '']</span></span><br><span class="line">print(string_4.count(<span class="string">"a"</span>))  <span class="comment"># 返回字符a在string_4中出现的次数 3</span></span><br><span class="line">print(string_3.replace(<span class="string">"i"</span>, <span class="string">"abc"</span>))  <span class="comment"># 替换所有i字母为abc</span></span><br><span class="line"><span class="comment"># multabc</span></span><br><span class="line"><span class="comment"># labcne</span></span><br><span class="line"><span class="comment"># strabcng</span></span><br><span class="line">print(string_2.center(<span class="number">20</span>, <span class="string">"-"</span>))  <span class="comment"># 使字符串根据所需宽度居中，填充-  ------string2-------</span></span><br><span class="line">print(<span class="string">"string_abc"</span>.strip(string_1))  <span class="comment"># 从string_abc字符串中去除string_1的内容 ing_abc</span></span><br><span class="line">print(<span class="string">","</span>.join(string_1))  <span class="comment"># 在逗号中加入string_1的内容用于分割 s,t,r</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串格式化</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(<span class="string">"{}年{}月{}日，作者{}"</span>.format(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="string">"anotherm4"</span>))  <span class="comment"># {}填充参数，2019年6月20日，作者anotherm4</span></span><br><span class="line">print(<span class="string">"{2}日，作者{3}，{1}月{0}年"</span>.format(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="string">"anotherm4"</span>))  <span class="comment"># 顺序控制，20日，作者anotherm4，6月2019年</span></span><br><span class="line">print(<span class="string">"{:->20,.2f}"</span>.format(<span class="number">1234567.12345</span>))  <span class="comment"># --------1,234,567.12</span></span><br><span class="line"><span class="comment"># {:<填充-><右对齐><宽度20><使用,作为千位分隔符><使用.定义浮点数精度><数据类型为浮点数f>}</span></span><br><span class="line"><span class="comment"># <左对齐 >右对齐 ^居中对齐</span></span><br><span class="line"><span class="comment"># b,c,d,o,x,X整数类型 e,E,f,%浮点数类型</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="Time库使用"><a href="#Time库使用" class="headerlink" title="Time库使用"></a>Time库使用</h1><h2 id="Python时间处理"><a href="#Python时间处理" class="headerlink" title="Python时间处理"></a>Python时间处理</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(time.time())  <span class="comment"># 返回时间戳 1561020541.161563</span></span><br><span class="line">print(time.ctime())  <span class="comment"># 返回时间字符串 Thu Jun 20 16:49:01 2019</span></span><br><span class="line">print(time.gmtime())  <span class="comment"># 获取计算机可处理的时间格式</span></span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2019,tm_mon=6,tm_mday=20,tm_hour=8,tm_min=49,tm_sec=1,tm_wday=3,tm_yday=171,tm_isdst=0)</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.gmtime()))  <span class="comment"># 格式化时间</span></span><br><span class="line"><span class="comment"># %Y年 %m月 %B月份名称 %b月份名称缩写 %d日 %A星期 %a星期缩写 %H24小时制 %h12小时制 %p上午下午 %M分钟 %S秒</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line">time.sleep(<span class="number">0.2</span>)</span><br><span class="line">end = time.perf_counter()</span><br><span class="line">print(end - start)  <span class="comment"># 0.2045585</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文本进度条实现"><a href="#文本进度条实现" class="headerlink" title="文本进度条实现"></a>文本进度条实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">scale = <span class="number">10</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale + <span class="number">1</span>):</span><br><span class="line">    a = <span class="string">'*'</span> * i</span><br><span class="line">    b = <span class="string">'.'</span> * (scale - i)</span><br><span class="line">    c = (i / scale) * <span class="number">100</span></span><br><span class="line">    dur = time.perf_counter() - start</span><br><span class="line">    <span class="comment"># print("\r{:3}%".format(i), end="")  # 单行简易打印</span></span><br><span class="line">    <span class="comment"># print("{:^3.0f}%[{}->{}]".format(c, a, b))  # 多行打印</span></span><br><span class="line">    print(<span class="string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span>.format(c, a, b, dur), end=<span class="string">""</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(3)</title>
    <url>/2019/06/21/LearnPython-3/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记3</b></font></p><blockquote><p>2019/6/21，本章主要记录Python分支结构、循环结构<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">guess = eval(input(<span class="string">"猜数字（1-9）："</span>))</span><br><span class="line"><span class="keyword">if</span> guess == <span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"正确"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> guess == <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">"正确"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"错误"</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'{}'</span>.format(<span class="string">'t'</span> <span class="keyword">if</span> guess == <span class="number">8</span> <span class="keyword">else</span> <span class="string">'f'</span>))  <span class="comment"># 紧凑形式</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">score = eval(input(<span class="string">"输分数（0-100）："</span>))</span><br><span class="line">grade = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> score >= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">"D"</span></span><br><span class="line"><span class="keyword">elif</span> score >= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">"C"</span></span><br><span class="line"><span class="keyword">elif</span> score >= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">"B"</span></span><br><span class="line"><span class="keyword">elif</span> score >= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">"A"</span></span><br><span class="line">print(<span class="string">"输入成绩属于级别{}"</span>.format(grade))</span><br></pre></td></tr></tbody></table></figure><h2 id="条件判断和组合"><a href="#条件判断和组合" class="headerlink" title="条件判断和组合"></a>条件判断和组合</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># or关键字，逻辑或</span></span><br><span class="line"><span class="keyword">if</span> guess > <span class="number">7</span> <span class="keyword">or</span> guess < <span class="number">9</span>: </span><br><span class="line">    print(<span class="string">"or"</span>)</span><br><span class="line"><span class="comment"># and关键字，逻辑与</span></span><br><span class="line"><span class="keyword">elif</span> guess > <span class="number">1</span> <span class="keyword">and</span> guess > <span class="number">6</span>:  </span><br><span class="line">    print(<span class="string">"and"</span>)</span><br><span class="line"><span class="comment"># not关键字，逻辑非</span></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> <span class="literal">False</span>:  </span><br><span class="line">    print(<span class="string">"not"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = eval(input(<span class="string">"请输入一个整数"</span>))</span><br><span class="line">    print(num ** <span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    print(<span class="string">"输入不是整数"</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="计数遍历循环"><a href="#计数遍历循环" class="headerlink" title="计数遍历循环"></a>计数遍历循环</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 5次循环 for (int i=0;i<5;i++)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):  </span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 从2-7步长为2 for (int i=2;i<7;){i+=2;}</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>): </span><br><span class="line">    print(i)</span><br></pre></td></tr></tbody></table></figure><h2 id="字符串遍历循环"><a href="#字符串遍历循环" class="headerlink" title="字符串遍历循环"></a>字符串遍历循环</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"Python"</span>:</span><br><span class="line">    print(c, end=<span class="string">","</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="列表遍历循环"><a href="#列表遍历循环" class="headerlink" title="列表遍历循环"></a>列表遍历循环</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> [<span class="number">123</span>, <span class="string">'Python'</span>, <span class="number">456</span>, <span class="string">"Another.M"</span>]:</span><br><span class="line">    print(line, end=<span class="string">","</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="文件遍历循环"><a href="#文件遍历循环" class="headerlink" title="文件遍历循环"></a>文件遍历循环</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">file = open(<span class="string">"3_Loop.txt"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    print(line)</span><br></pre></td></tr></tbody></table></figure><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> a > <span class="number">0</span>:</span><br><span class="line">    print(a)</span><br></pre></td></tr></tbody></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">string = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"t"</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 跳出单次循环</span></span><br><span class="line">    print(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 未使用break，继续执行</span></span><br><span class="line">    print(<span class="string">"正常退出"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">"t"</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 跳出整个循环</span></span><br><span class="line">    print(c, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 使用break，不执行</span></span><br><span class="line">    print(<span class="string">"正常退出"</span>)</span><br><span class="line"><span class="keyword">while</span> string != <span class="string">""</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">"t"</span>:</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 仅跳出最内层循环</span></span><br><span class="line">        print(c, end=<span class="string">""</span>)</span><br><span class="line">    string = string[:<span class="number">-1</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Random库"><a href="#Random库" class="headerlink" title="Random库"></a>Random库</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 梅森旋转算法生成随机数</span></span><br><span class="line">print(random.random())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># random种子，默认当前系统时间</span></span><br><span class="line"><span class="comment"># random.seed(10)  </span></span><br><span class="line"><span class="comment"># 种子固定，随机数则不变</span></span><br><span class="line">print(random.random())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成[10,100]之间的整数</span></span><br><span class="line">print(random.randint(<span class="number">10</span>, <span class="number">100</span>))  </span><br><span class="line"><span class="comment"># 生成[10,100]之间以10为步长的整数</span></span><br><span class="line">print(random.randrange(<span class="number">10</span>, <span class="number">100</span>, <span class="number">10</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成k比特长的整数</span></span><br><span class="line">print(random.getrandbits(<span class="number">8</span>))</span><br><span class="line">print(random.getrandbits(<span class="number">16</span>))</span><br><span class="line">print(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成[a,b]之间的小数</span></span><br><span class="line">print(random.uniform(<span class="number">10</span>, <span class="number">100</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从序列seq中选择一个元素</span></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">print(random.choice(s))  </span><br><span class="line"><span class="comment"># 将seq中元素随机排序，返回打乱后的序列</span></span><br><span class="line">random.shuffle(s)</span><br><span class="line">print(s)</span><br></pre></td></tr></tbody></table></figure><h2 id="圆周率计算"><a href="#圆周率计算" class="headerlink" title="圆周率计算"></a>圆周率计算</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> perf_counter</span><br><span class="line"></span><br><span class="line"><span class="string">"""近似计算"""</span></span><br><span class="line"><span class="comment"># 公式1/pow(16,k)*(4/(8*k+1)-2/(8*k+4)-1/(8*k+5)-1/(8*k+6))</span></span><br><span class="line">pi = <span class="number">0</span></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(N):</span><br><span class="line">    pi += <span class="number">1</span> / pow(<span class="number">16</span>, k) * (<span class="number">4</span> / (<span class="number">8</span> * k + <span class="number">1</span>) - <span class="number">2</span> / (<span class="number">8</span> * k + <span class="number">4</span>) - <span class="number">1</span> / (<span class="number">8</span> * k + <span class="number">5</span>) - <span class="number">1</span> / (<span class="number">8</span> * k + <span class="number">6</span>))</span><br><span class="line">print(<span class="string">"{}"</span>.format(pi))</span><br><span class="line"></span><br><span class="line"><span class="string">"""蒙特卡罗（蒙眼戳飞镖）"""</span></span><br><span class="line">DARTS = <span class="number">1000</span> * <span class="number">1000</span></span><br><span class="line">hits = <span class="number">0.0</span></span><br><span class="line">start = perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, DARTS + <span class="number">1</span>):</span><br><span class="line">    x, y = random(), random()</span><br><span class="line">    dist = pow(x ** <span class="number">2</span> + y ** <span class="number">2</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> dist <= <span class="number">1.0</span>:</span><br><span class="line">        hits = hits + <span class="number">1</span></span><br><span class="line">pi = <span class="number">4</span> * (hits / DARTS)</span><br><span class="line">print(<span class="string">"{}"</span>.format(pi))</span><br><span class="line">print(<span class="string">"{}"</span>.format(perf_counter() - start))</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(4)</title>
    <url>/2019/06/27/LearnPython-4/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记4</b></font></p><blockquote><p>2019/6/19，本章主要记录Python函数以及递归<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">s = <span class="number">0</span>  <span class="comment"># 全局变量</span></span><br><span class="line">a = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a  <span class="comment"># 使用关键字，将全局变量引入局部，用于更改赋值，并保证全局变量值不变</span></span><br><span class="line">    a = <span class="number">1</span>  <span class="comment"># 给全局变量赋值</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(a, func(a))  <span class="comment"># 调用函数，传递参数，使用global关键字的a的为1，全局变量a的值依然为2000，</span></span><br></pre></td></tr></tbody></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用递归将字符反转后输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rvs</span><span class="params">(n)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> n == <span class="string">""</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> rvs(n[<span class="number">1</span>:]) + n[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span>  </span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 汉诺塔</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span><span class="params">(n, src, dst, mid)</span>:</span>  </span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"{}:{}->{}"</span>.format(<span class="number">1</span>, src, dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hanoi(n - <span class="number">1</span>, src, mid, dst)</span><br><span class="line">        print(<span class="string">"{}:{}->{}"</span>.format(n, src, dst))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        hanoi(n - <span class="number">1</span>, mid, dst, src)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rvs(<span class="string">"TEST TEST EST ST T"</span>))</span><br><span class="line">print(fibonacci(<span class="number">23</span>))</span><br><span class="line">print(hanoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>))</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(6)</title>
    <url>/2019/07/25/LearnPython-6/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记6</b></font></p><blockquote><p>2019/7/25，本章主要记录Python文件操作<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="在Python中打开一个文件"><a href="#在Python中打开一个文件" class="headerlink" title="在Python中打开一个文件"></a>在Python中打开一个文件</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 以文本模式打开</span></span><br><span class="line">text_file = open(<span class="string">'1_File.txt'</span>, <span class="string">'rt'</span>) </span><br><span class="line">print(text_file.readline())</span><br><span class="line">text_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以二进制模式打开</span></span><br><span class="line">binary_file = open(<span class="string">'1_File.txt'</span>, <span class="string">'rb'</span>)  </span><br><span class="line">print(binary_file.readline())</span><br><span class="line">binary_file.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># r代表只读模式，默认以只读模式打开，若文件不存在返回FileNotFoundError</span></span><br><span class="line">file_r = open(<span class="string">'1_File.txt'</span>, <span class="string">'r'</span>)  </span><br><span class="line"><span class="comment"># w代表覆盖写入模式，若文件不存在则创建，存在则覆盖</span></span><br><span class="line">file_w = open(<span class="string">'1_File.txt'</span>, <span class="string">'w'</span>) </span><br><span class="line"><span class="comment"># x代表创建写入模式，若文件不存在则创建，存在则返回FileExistsError </span></span><br><span class="line">file_x = open(<span class="string">'1_File.txt'</span>, <span class="string">'x'</span>)  </span><br><span class="line"><span class="comment"># a代表追加写入模式，若文件不存在则创建，存在则在文件最后追加内容</span></span><br><span class="line">file_a = open(<span class="string">'1_File.txt'</span>, <span class="string">'a'</span>)  </span><br><span class="line"><span class="comment"># b代表以二进制形式读取文件</span></span><br><span class="line">file_b = open(<span class="string">'1_File.txt'</span>, <span class="string">'b'</span>)  </span><br><span class="line"><span class="comment"># t代表以文本文件形式读取文件</span></span><br><span class="line">file_t = open(<span class="string">'1_File.txt'</span>, <span class="string">'t'</span>)  </span><br><span class="line"><span class="comment"># +代表在原功能基础上增加读写功能</span></span><br><span class="line">file_plus = open(<span class="string">'1_File.txt'</span>, <span class="string">'a+'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="文件读取模式"><a href="#文件读取模式" class="headerlink" title="文件读取模式"></a>文件读取模式</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 全部内容按字读取</span></span><br><span class="line">file_read = open(<span class="string">'1_File.txt'</span>)</span><br><span class="line">print(file_read.read()) </span><br><span class="line">file_read.close()</span><br><span class="line"></span><br><span class="line">file_readline = open(<span class="string">'1_File.txt'</span>)</span><br><span class="line"><span class="comment"># 读文件单行内容</span></span><br><span class="line">print(file_readline.readline())  </span><br><span class="line">file_readline.close()</span><br><span class="line"></span><br><span class="line">file_readlines = open(<span class="string">'1_File.txt'</span>)</span><br><span class="line"><span class="comment"># 读整个文件，将每行以元素形式存为列表</span></span><br><span class="line">print(file_readlines.readlines())  </span><br><span class="line">file_readlines.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="文本遍历"><a href="#文本遍历" class="headerlink" title="文本遍历"></a>文本遍历</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 一次读取</span></span><br><span class="line">file_once = open(<span class="string">'1_File.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">print(file_once.read())</span><br><span class="line">file_once.close()</span><br><span class="line"><span class="comment"># 逐步读取</span></span><br><span class="line">file_step = open(<span class="string">'1_File.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">read = file_step.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> read != <span class="string">""</span>:</span><br><span class="line">    read = file_step.read(<span class="number">10</span>)</span><br><span class="line">    print(read)</span><br><span class="line">file_step.close()</span><br><span class="line"><span class="comment"># 一次读入，分行处理</span></span><br><span class="line">file_line = open(<span class="string">'1_File.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_line.readlines():</span><br><span class="line">    print(line)</span><br><span class="line">file_line.close()</span><br><span class="line"><span class="comment"># 分行读入，逐次处理</span></span><br><span class="line">file_lines = open(<span class="string">'1_File.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">    print(line)</span><br><span class="line">file_lines.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">file_write = open(<span class="string">'1_File_Output_1.txt'</span>, <span class="string">'w+'</span>)</span><br><span class="line">list = [<span class="string">'Python'</span>, <span class="string">'Learn'</span>, <span class="string">'Note'</span>, <span class="string">'By'</span>, <span class="string">'Another.M'</span>]</span><br><span class="line">file_write.writelines(list)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_write:</span><br><span class="line">    print(line)</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br><span class="line">file_write = open(<span class="string">'1_File_Output_2.txt'</span>, <span class="string">'w+'</span>)</span><br><span class="line">list = [<span class="string">'Python'</span>, <span class="string">'Learn'</span>, <span class="string">'Note'</span>, <span class="string">'By'</span>, <span class="string">'Another.M'</span>]</span><br><span class="line">file_write.writelines(list)</span><br><span class="line"><span class="comment"># 将指针（光标）移动到0位置（开头）</span></span><br><span class="line">file_write.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_write:</span><br><span class="line">    print(line)</span><br><span class="line">file_write.close()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(5)</title>
    <url>/2019/07/17/LearnPython-5/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记5</b></font></p><blockquote><p>2019/7/17，本章主要记录Python集合、序列以及字典<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 集合是无序的</span></span><br><span class="line"><span class="comment"># 使用{}建立集合</span></span><br><span class="line">A = {<span class="string">'python'</span>, <span class="number">123</span>, (<span class="string">"python"</span>, <span class="number">123</span>), <span class="string">"Python"</span>, <span class="string">"python123"</span>, <span class="string">"Python123"</span>}</span><br><span class="line">print(A) </span><br><span class="line"><span class="comment"># 使用set()建立集合</span></span><br><span class="line">B = set(<span class="string">"python123"</span>)  </span><br><span class="line">print(B)</span><br><span class="line"><span class="comment"># 集合元素唯一</span></span><br><span class="line">C = {<span class="string">"p"</span>, <span class="number">123</span>, <span class="string">"y"</span>, <span class="string">"python123"</span>, <span class="string">"python"</span>, <span class="number">123</span>, <span class="number">123</span>, <span class="number">123</span>}  </span><br><span class="line">print(C)</span><br></pre></td></tr></tbody></table></figure><h2 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(B | C)  <span class="comment"># 并集，B和C所有元素 </span></span><br><span class="line">print(B - C)  <span class="comment"># 差集，在B不在C中的元素 </span></span><br><span class="line">print(B & C)  <span class="comment"># 交集，B和C共有元素 </span></span><br><span class="line">print(B ^ C)  <span class="comment"># 补集，B和C非相同元素 </span></span><br><span class="line">print(B < C)  <span class="comment"># 判断子集关系 </span></span><br><span class="line">print(B > C)  <span class="comment"># 判断包含关系</span></span><br></pre></td></tr></tbody></table></figure><h2 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 返回A的复制</span></span><br><span class="line">D = A.copy()</span><br><span class="line">print(D)  </span><br><span class="line">print(A)  </span><br><span class="line">D = D - A</span><br><span class="line">print(D)  </span><br><span class="line">print(A) </span><br><span class="line"><span class="comment"># 返回A的元素个数</span></span><br><span class="line">print(len(A))  </span><br><span class="line"><span class="comment"># 判断A中有C元素</span></span><br><span class="line">print(A <span class="keyword">in</span> C)  </span><br><span class="line"><span class="comment"># 判断A中无C元素</span></span><br><span class="line">print(A <span class="keyword">not</span> <span class="keyword">in</span> C)  </span><br><span class="line"><span class="comment"># 将E转换为集合</span></span><br><span class="line">E = <span class="string">"python"</span></span><br><span class="line">print(E)  </span><br><span class="line">print(set(E))  </span><br><span class="line"><span class="comment"># 添加不包含在A中的元素</span></span><br><span class="line">A.add(<span class="string">"python"</span>)</span><br><span class="line">A.add(<span class="string">"anaconda"</span>)</span><br><span class="line">print(A) </span><br><span class="line"><span class="comment"># 移除A中的元素，若不包含也不报错</span></span><br><span class="line">A.discard(<span class="string">"anaconda"</span>)</span><br><span class="line">print(A)  </span><br><span class="line"><span class="comment"># 移除A中的元素，若不包含返回KeyError</span></span><br><span class="line"><span class="comment"># A.remove("anaconda")</span></span><br><span class="line">A.remove(<span class="string">"python"</span>)</span><br><span class="line">print(A) </span><br><span class="line"><span class="comment"># 随即返回A中一个元素，更新A，若A为空则产生KeyError</span></span><br><span class="line">A.pop()</span><br><span class="line">print(A)  </span><br><span class="line"><span class="comment"># 移除A中所有元素</span></span><br><span class="line">A.clear()</span><br><span class="line">print(A)</span><br></pre></td></tr></tbody></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><blockquote><p>序列与集合不同，所有序列之间的元素都是有顺序的</p></blockquote><h2 id="序列通用操作"><a href="#序列通用操作" class="headerlink" title="序列通用操作"></a>序列通用操作</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">sequences = [<span class="string">"python"</span>, <span class="number">12345</span>, <span class="string">",./'"</span>, <span class="string">",.s23/4s"</span>]</span><br><span class="line"><span class="comment"># 判断python是sequence的元素</span></span><br><span class="line">print(<span class="string">"python"</span> <span class="keyword">in</span> sequences) </span><br><span class="line"><span class="comment"># 判断python不是sequence的元素</span></span><br><span class="line">print(<span class="string">"python"</span> <span class="keyword">not</span> <span class="keyword">in</span> sequences)</span><br><span class="line"><span class="comment"># 连接两个序列</span></span><br><span class="line">print(sequences + sequences)</span><br><span class="line"><span class="comment"># 将序列复制3次</span></span><br><span class="line">print(sequences * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 索引，返回第2个元素</span></span><br><span class="line">print(sequences[<span class="number">2</span>])  </span><br><span class="line"><span class="comment"># 切片，返回第包含第2-3元素的子序列</span></span><br><span class="line">print(sequences[<span class="number">1</span>:<span class="number">3</span>]) </span><br><span class="line"><span class="comment"># 切片，返回包含2-4步长为2的元素的子序列</span></span><br><span class="line">print(sequences[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 切片，将序列反转</span></span><br><span class="line">print(sequences[::<span class="number">-1</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用[]或list()创建，元素之间用逗号分隔</span></span><br><span class="line">lists = [<span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"fish"</span>, <span class="number">123</span>]</span><br><span class="line">print(lists) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换列表第4个元素为bird</span></span><br><span class="line">lists[<span class="number">3</span>] = <span class="string">"bird"</span>  </span><br><span class="line">print(lists)  </span><br><span class="line"><span class="comment"># 将列表切片后，替换对应位置的元素子列表</span></span><br><span class="line">lists[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">"fish"</span>, <span class="string">"dog"</span>, <span class="number">123</span>]  </span><br><span class="line">print(lists)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除列表中1-3个元素</span></span><br><span class="line"><span class="keyword">del</span> lists[<span class="number">0</span>:<span class="number">2</span>] </span><br><span class="line">print(lists) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表最后增加一个元素</span></span><br><span class="line">lists.append(<span class="string">"application"</span>)  </span><br><span class="line">print(lists)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制列表</span></span><br><span class="line">lists1 = lists.copy() </span><br><span class="line">print(lists1) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除列表元素</span></span><br><span class="line">lists1.clear() </span><br><span class="line">print(lists1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表第2个位置插入11223344</span></span><br><span class="line">lists.insert(<span class="number">1</span>, <span class="number">11223344</span>)  </span><br><span class="line">print(lists) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出（出栈）列表第2个位置的元素，返回值</span></span><br><span class="line">lists.pop(<span class="number">1</span>)</span><br><span class="line">print(lists) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除列表的123这个元素</span></span><br><span class="line">lists.remove(<span class="number">123</span>) </span><br><span class="line">print(lists)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 反转列表</span></span><br><span class="line">lists.reverse()  </span><br><span class="line">print(lists)</span><br></pre></td></tr></tbody></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><blockquote><p>与列表不同，元组一旦创建就不可修改</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用()或tuple()创建，元素之间用逗号分隔</span></span><br><span class="line"><span class="comment"># 元组的创建可以不使用小括号</span></span><br><span class="line">tuples = <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"fish"</span>, <span class="string">"bird"</span></span><br><span class="line">print(tuples) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组嵌套</span></span><br><span class="line">tuples = (tuples, tuples)</span><br><span class="line">print(tuples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转换为元组，用于数据保护</span></span><br><span class="line">tuples1 = tuple(lists)  </span><br><span class="line">print(tuples1)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我所用过的各版本Linux的浅谈</title>
    <url>/2016/07/27/LinuxExperience/</url>
    <content><![CDATA[<html><head></head><body><h3 id="以下所写仅为个人观点，真实感受请自己体验，如有雷同，那就让它雷同吧"><a href="#以下所写仅为个人观点，真实感受请自己体验，如有雷同，那就让它雷同吧" class="headerlink" title="以下所写仅为个人观点，真实感受请自己体验，如有雷同，那就让它雷同吧"></a><del>以下所写仅为个人观点，真实感受请自己体验，如有雷同，那就让它雷同吧</del></h3><p><font color="green">2018.12.01更新:拥有VPS管理经验大概2年左右了，期间主要使用CentOS 6，最近更换了Debian 9，所以更新了一下大部分内容</font></p><p>文中部分文字、简介等来源于<a href="https://zh.wikipedia.org/wiki/Linux发行版列表">维基百科-Linux发行版列表</a></p><p><del></del></p><hr><h2 id="先列出我所用过的Linux，按使用先后排序"><a href="#先列出我所用过的Linux，按使用先后排序" class="headerlink" title="先列出我所用过的Linux，按使用先后排序"></a>先列出我所用过的Linux，按使用先后排序</h2><ul><li><p><a href="http://cn.ubuntu.com/">Ubuntu</a></p></li><li><p><del><a href="http://www.ubuntukylin.com/">Ubuntu Kylin</a></del></p></li><li><p><del><a href="https://www.kali.org/">Kali Linux</a></del></p></li><li><p><del><a href="https://www.deepin.org/">Deepin</a></del></p></li><li><p><del><a href="https://elementary.io/">elementary OS</a></del></p></li><li><p><a href="https://www.centos.org/">CentOS</a></p></li><li><p><a href="https://www.debian.org">Debian</a></p></li><li><p><del><a href="https://www.archlinux.org/">Arch Linux</a></del></p><p><font color="green">添加Fedora，Manjaro的部分简述，删除和修改了一些无用的描述，把 “★(\u2605)” 更换成为了 “⭐(\u2B50)” ，算是为了网页添加了一丝色彩，虽然不知道能不能被识别</font></p></li></ul><hr><a id="more"></a><h2 id="以下为各版本的个人体会，推荐度基于整体综合考虑"><a href="#以下为各版本的个人体会，推荐度基于整体综合考虑" class="headerlink" title="以下为各版本的个人体会，推荐度基于整体综合考虑"></a>以下为各版本的个人体会，推荐度基于整体综合考虑</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ul><li>简介：基于Debian，由Canonical公司赞助</li><li>使用感受：<del>直观感觉就是上手非常容易，自带LibreOffice，自带Firefox，安装软件可以通过软件中心，或者直接<code>apt-get install "package name"</code>(16.04版本已经精简为apt)，而且界面相对于其他的Linux来说很漂亮，适用于外观党，而且懒得折腾界面与不会折腾的新手，目前在实体机上依然使用中</del><br><font color="green">Ubuntu变化挺大，Unity全面变为GNOME，18.04LTS 获得10年支持，虽然没详细关注过，但仍不失一个好的发行版</font></li><li>推荐度：⭐⭐⭐⭐<br><br><font color="green">没啥可说的，依然是四星，用于开发还行，做服务器我可能不会选择</font></li></ul><h3 id="Ubuntu-Kylin"><a href="#Ubuntu-Kylin" class="headerlink" title="Ubuntu Kylin"></a>Ubuntu Kylin</h3><ul><li>简介：基于Ubuntu的Linux发行版，以中国大陆用户为主，中文名为“优麒麟” 主要开发者为 Ubuntu Kylin 社区、国防科学技术大学（NUDT）与 Canonical公司</li><li><del>使用感受：说白了就是Ubuntu的中国定制版，本地化比较好一些，自带软件相对于Ubuntu有一些不同，其余与Ubuntu基本没有太大区别，但是由于个人有一些精神洁癖，所以这个版本并未使用超过2小时</del></li><li>推荐度：未知，不做评价<br><br><font color="green">很久很久没有用过了，据说自己搞了个新的UI，精神洁癖倒是没有了<font color="red"><del>（毕竟开源万岁😂）</del></font></font></li></ul><h3 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h3><ul><li>简介：基于Debian的Linux发行版， 设计用于数字鉴识和渗透测试。由Offensive Security Ltd维护和资助。</li><li><del>使用感受：在Android 2.3时期就听说过使用手机虚拟机跑BackTrack可以破解别人的无线网，虽然我试过没成功，但是后来BackTrack发展成了这个Kali Linux，我用虚拟机和实体机分别尝试过，但是因为是用于渗透和破解的系统，过于高端而当时我的技术不达标所以放弃了，总的来说就是如果你想往渗透破解反编译这方面发展的话，可以考虑使用</del></li><li>推荐度：⭐⭐⭐<br><br><font color="green">依旧三星吧，毕竟没有深入了解过渗透，只玩过Steam上面的<a href="https://store.steampowered.com/app/365450/Hacknet/">Hacknet</a>，不过肯定是安全人员的首选了，顺便说一句：<font color="red">违法的事情不要做</font></font></li></ul><h3 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h3><ul><li>简介：基于Ubuntu，0.x版基于Debian。经历过多个桌面环境的变更（IceWM,xfce,LXDE,GNOME)，从Linux Deepin 12.12开始使用自主研发的DDE，15.2已重新基于Debian并切DDE已经升级为3.0</li><li><del>使用感受：当初无意间注意到的，版本还是14，貌似就是这个时候火起来的，尝试实体机安装了一下，安装过程竟然简单到点三次下一步就可以了，而且自带一些深度软件，也就是其发行公司自行开发的软件，短暂用了一段时间，优点是比Ubuntu还容易上手，由于14基于Ubuntu，所以用起来还算不错，新版本15据说是因为换了Debian变得不算太稳定，并且由于个人已经将Ubuntu作为常用系统，所以新版本只在虚拟机上看了看，总的来说，是个不错的选择，并且这个系统前景很宽阔，可以作为常用</del></li><li><del>推荐度：⭐⭐⭐⭐</del><br><br><font color="green">联合创始人离职，红芯套壳，虽然这两个事情根本联系不起来，但是<font color="red">谁实打实干事情谁心里清楚</font></font></li></ul><h3 id="elementary-OS"><a href="#elementary-OS" class="headerlink" title="elementary OS"></a>elementary OS</h3><ul><li>简介：基于Ubuntu的Linux发行版。它使用一个自己开发的基于GNOME的名为Pantheon的桌面环境，从为Ubuntu设计的一套主题和应用程序发展而来</li><li><del>使用感受：当初没事的时候找到的，但个人使用没超过15分钟，简单来说就是一套改了主题的Ubuntu，而且改得还挺不错，据一些网络评论说是可以提供类似于Mac OS X的体验，但是我没觉得，不过对于外观党，是个不错的选择</del></li><li><del>推荐度：⭐⭐</del><br><br><font color="green">不关注了，但是在<a href="https://distrowatch.com/">DistroWatch</a>上面排名也挺靠前的了，现在应该需要改成⭐⭐⭐⭐</font></li></ul><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><ul><li>简介：Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定发布的源代码所编译而成，属于Red Hat系，使用RPM作为软件包</li><li><del>使用感受：一共安装了4次，使用的版本为Everything ISO，也就是全功能版，第一次安装由于是体验，所以就选择了最大化安装（虚拟机），用了大概一个小时，体验还算不错，因为是区别于Debian系列的Red Hat系，所以使用起来很新颖，于是想要实体机尝试一下，刚开始安装的时候选了最小化安装，结果就得到了一句话：“这特么是什么鬼”。后来查了查，最小化安装没有GUI，也就是没有图形界面，然后选了KDE作为桌面环境安装了一次，但是KDE桌面稳定个人觉得有些难用，所以又选择了GNOME来安装，用了大概一个小时，还是用回了Ubuntu，对于CentOS个人是特别满意的，因为这系统虽然自带<a href="http://openjdk.java.net/">OpenJDK</a>，但是个人相对来说还是喜欢用<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">OracleJDK</a>，而OracleJDK分两种安装格式，一种是RPM，一种是压缩包，简而言之，Red Hat系对于开发支持方面比Ubuntu高的多一些，实际使用差别不大</del></li><li>推荐度：⭐⭐⭐⭐<br><br><font color="green">VPS上用了一年半多，只能说除了稳，没啥缺点了，不过想吐槽的是CentOS的软件更新速度，用过Manjaro之后就会觉得CentOS，太稳了都不敢轻易更新的🤦‍</font></li></ul><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><ul><li>简介：由GPL和其他自由软件许可协议授权的自由软件组成的操作系统，由Debian项目（Debian Project）组织维护，Software in the Public Interest提供支持并持有商标作为保护机构</li><li><del>使用感受：要说感受比较深的应该就是这个了，毕竟Ubuntu和Kali Linux都是基于Debian的，提供xfce,LXDE,GNOME,KDE四种桌面环境，同CentOS,还是GNOME相对来说好折腾一些，但实际使用上手不如Ubuntu与Deepin容易，功能相对于CentOS比较弱，因为Debian的精神就是坚守Unix和自由软件，所以对于用户的选择很多，也就是玩Linux熟练到一定程度之后就可以尝试一下使用Debian，不管别人对我怎么看，对于我来说，这个系统就是个随便改，改得面目全非都行，反正是拿来玩的系统，用它来做开发，还是因人而异了</del><br><font color="red">吃我开源邪教！！！</font></li><li>推荐度：⭐⭐⭐<del>⭐⭐</del></li></ul><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><ul><li>简介：基于<a href="https://zh.wikipedia.org/wiki/KISS原则">KISS原则</a>（Keep It Simple, Stupid 的首字母缩略字），朝向轻量（lightweight）以及简单（simple）的Linux发行版</li><li>使用感受：<del>刚开始使用的时候我是拒绝的，因为<a href="http://cn.ezbsystems.com/ultraiso/index.html">UltraISO</a>刻录的U盘启动盘在EFI下根本没法启动，别的Linux发行版却一点儿问题都没有，后来用了一个软件直接把Arch Linux刻到了硬盘里启动后，等了半天发现怎么没界面？后来才反应过来，这货特么的没有GUI，没有GUI，没有GUI，只有一个命令行，当时我就陷入了深思，后来看了看<a href="https://wiki.archlinux.org/index.php/Main_page_(简体中文)">Arch Linux的Wiki</a>，果断放弃了，因为我还没到达光靠命令行或终端就能解决一切问题的地步。</del><br><font color="red">Arch入门深似海，从此其他Linux是路人<br></font></li><li>推荐度：⭐⭐</li></ul><h3 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a><font color="green">Fedora</font></h3><ul><li>简介：长话短说-Redhat试验田</li><li>使用感受：dnf包管理器可比yum爽多了，至于包更新速度嘛，反正不会滚滚挂就是了</li><li>推荐度：⭐⭐⭐⭐</li></ul><h3 id="Manjaro"><a href="#Manjaro" class="headerlink" title="Manjaro"></a><font color="green">Manjaro</font></h3><ul><li>简介：<font color="red">Arch Linux我帮你攒好了，你就放心用</font></li><li>使用感受：<font color="red">用了Arch就能把别的Linux当路人了你还要我Manjaro说啥？</font></li><li>推荐度：<font color="red">没法形容，不喜欢Linux的人自然不会喜欢</font></li></ul><hr><p>以上的一些，纯属个人经验，具体使用哪个版本，还要你们自己自行尝试，还是那句话：因人而异，不过总的来说，<del>我推荐三个：Deepin适合日常娱乐，Ubuntu适合入手练习Linux，CentOS适合开发</del><br>Debian、CentOS>>服务器，Fedora、Manjaor，Ubuntu>>桌面用户，<font color="red">Arch Linux？？？不存在的！！！</font></p><p><del>顺便说个使用难度排序：Deepin < Ubuntu = Ubuntu Kylin = elementary OS < CentOS ≈ Debian < Kali Linux < Arch Linux ~</del></p></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LearnPython(7)</title>
    <url>/2019/08/04/LearnPython-7/</url>
    <content><![CDATA[<html><head></head><body><p><font style="font-size:24px"><b>Python学习笔记7</b></font></p><blockquote><p>2019/8/4，本章主要记录Python的OS库操作<br><br><strong><em>This Article Is Not Python Tutorial</em></strong>，极大部分包含了个人的主观意见，知识仅供参考，本文目前使用Python版本为3.7.3</p></blockquote><blockquote><p>路都是自己走出来的</p></blockquote><a id="more"></a><h1 id="OS库"><a href="#OS库" class="headerlink" title="OS库"></a>OS库</h1><h2 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 返回绝对路径</span></span><br><span class="line">print(os.path.abspath(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"> <span class="comment"># 返回使用\分割的路径</span></span><br><span class="line">print(os.path.normpath(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>)) </span><br><span class="line"><span class="comment"># 程序和文件之间的相对路径</span></span><br><span class="line">print(os.path.relpath(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 返回目录名称</span></span><br><span class="line">print(os.path.dirname(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 返回路径最后的文件名</span></span><br><span class="line">print(os.path.basename(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 组合字符串返回路径</span></span><br><span class="line">print(os.path.join(<span class="string">"D://Projects"</span>, <span class="string">"//PyCharm//LearnPython//L8//1_OS.py"</span>))</span><br><span class="line"><span class="comment"># 判断路径存在  </span></span><br><span class="line">print(os.path.exists(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 判断是文件</span></span><br><span class="line">print(os.path.isfile(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 判断是目录</span></span><br><span class="line">print(os.path.isdir(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>)) </span><br><span class="line"><span class="comment"># 得到访问时间</span></span><br><span class="line">print(os.path.getatime(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 得到修改时间</span></span><br><span class="line">print(os.path.getmtime(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 得到创建时间</span></span><br><span class="line">print(os.path.getctime(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))  </span><br><span class="line"><span class="comment"># 得到文件大小</span></span><br><span class="line">print(os.path.getsize(<span class="string">"D://Projects//PyCharm//LearnPython//L8//1_OS.py"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行计算器</span></span><br><span class="line">os.system(<span class="string">"C:\\Windows\\System32\\calc.exe"</span>)</span><br><span class="line"><span class="comment"># 调用绘图</span></span><br><span class="line">os.system(<span class="string">"C:\\Windows\\System32\\mspaint.exe D:\\Projects\\PyCharm\\LearnPython\\L7\\5_WordCloud.png"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="环境参数"><a href="#环境参数" class="headerlink" title="环境参数"></a>环境参数</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(os.getcwd())  <span class="comment"># 返回程序当前路径</span></span><br><span class="line">print(os.getlogin())  <span class="comment"># 获取当前系统用户名</span></span><br><span class="line">print(os.cpu_count())  <span class="comment"># 获取CPU内核数量</span></span><br><span class="line">print(os.urandom(<span class="number">10</span>))  <span class="comment"># 获取10个字节长度的随机字符串，用于加密和解密运算</span></span><br></pre></td></tr></tbody></table></figure><h1 id="自动化安装脚本编写"><a href="#自动化安装脚本编写" class="headerlink" title="自动化安装脚本编写"></a>自动化安装脚本编写</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">libs = {<span class="string">"numpy"</span>, <span class="string">"matplotlib"</span>, <span class="string">"pillow"</span>, <span class="string">"jieba"</span>, <span class="string">"wordcloud"</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> lib <span class="keyword">in</span> libs:</span><br><span class="line">        os.system(<span class="string">"pip install "</span> + lib)</span><br><span class="line">    print(<span class="string">"success"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"error"</span>)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年我创造过的Logo</title>
    <url>/2019/12/31/TheLogoThatICreated/</url>
    <content><![CDATA[<html><head></head><body><p>每一个Logo，都有它的一段故事</p><p>每一段故事，都代表着每次我做出的选择</p><p>每个选择，也都付出了相应的后果……</p><a id="more"></a><h1 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h1><ul><li>闲来无事，做个什么好呢？</li><li>试试创造一下自己的小天地吧。</li><li>“毕竟我也下决心改变自己的脾气了呢”。<br><img alt="1-1" data-src="/images/logo/1.0.jpg"><h1 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h1></li><li>“我应该是时候去尝试寻找一些我所未尝试的事物了吧，毕竟我的世界目前还是一片黑白。”<br><img alt="2-1" data-src="/images/logo/2.0.png"><h1 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h1></li><li>“我所定好的目标，渲染出了我已有的色彩，我的道路，明晰可见。”<br><img alt="2-2" data-src="/images/logo/2.0final.png"><h1 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h1></li><li>“故事刚刚开始。”我仍然面对着一片未知的空白。<br><img alt="4-1" data-src="/images/logo/4.0Origin.png"><h1 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h1></li><li>“或许故事远不会结束吧。”我对自己说。<br><img alt="4-2" data-src="/images/logo/4.0.jpg"><h1 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h1></li><li>“我的色彩在哪里呢？找个人去填充一下吧。”<br><img alt="3-1" data-src="/images/logo/3.0.png"><h1 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h1></li><li>“我的色彩，是你给的。”<br><img alt="3-2" data-src="/images/logo/3.0final.jpg"><h1 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h1></li><li>我尽量降低自己的个人色彩，加了个白边框，<code>但你觉得只有你给的色彩才是最好的</code>。<br><img alt="3-3" data-src="/images/logo/3.0finalwhite.jpg"><h1 id="5-0"><a href="#5-0" class="headerlink" title="5.0"></a>5.0</h1></li><li>“那么，就让一切回归到原点吧。”<br><img alt="5-1" data-src="/images/logo/5.0.jpg"></li></ul></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Creator</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法测试</title>
    <url>/2016/04/14/MarkdownTest/</url>
    <content><![CDATA[<html><head></head><body><p><img alt data-src="/images/avatar.jpg">图片测试</p><hr><h1 id="This-is-a-test-一级标题测试"><a href="#This-is-a-test-一级标题测试" class="headerlink" title="This is a test 一级标题测试"></a>This is a test 一级标题测试</h1><h2 id="This-is-a-test-二级标题测试"><a href="#This-is-a-test-二级标题测试" class="headerlink" title="This is a test 二级标题测试"></a>This is a test 二级标题测试</h2><h3 id="This-is-a-test-三级标题测试"><a href="#This-is-a-test-三级标题测试" class="headerlink" title="This is a test 三级标题测试"></a>This is a test 三级标题测试</h3><h4 id="This-is-a-test-四级标题测试"><a href="#This-is-a-test-四级标题测试" class="headerlink" title="This is a test 四级标题测试"></a>This is a test 四级标题测试</h4><h5 id="This-is-a-test-五级标题测试"><a href="#This-is-a-test-五级标题测试" class="headerlink" title="This is a test 五级标题测试"></a>This is a test 五级标题测试</h5><h6 id="This-is-a-test-六级标题测试"><a href="#This-is-a-test-六级标题测试" class="headerlink" title="This is a test 六级标题测试"></a>This is a test 六级标题测试</h6><a id="more"></a><hr><p><a href="https://github.com/AnotherM">单击进入我的GitHub</a> 链接测试</p><hr><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>{</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>{</span><br><span class="line">		System.out.println(<span class="string">"Test"</span>);</span><br><span class="line">	}</span><br><span class="line">} </span><br><span class="line"><span class="comment">//代码块测试</span></span><br></pre></td></tr></tbody></table></figure><hr><p><code>public class test1{public void main(String[]args){System.out.println("Test");}}</code><br>代码测试</p><hr><blockquote><p>This is a test 引用测试</p></blockquote><hr><p>多级列表测试</p><ul><li>Test1<ul><li>Test2<ul><li>Test3</li></ul></li></ul></li></ul><hr><p>普通列表测试</p><ul><li>Test1</li><li>Test2</li><li>Test3</li></ul><hr><p><em>Test</em> 斜体测试</p><p><strong>Test</strong> 粗体测试</p><p><del>Test</del> 删除线测试</p><hr><p>表格测试<br>| 1 | 2 | 3 |<br>| - | - | - |<br>| 1 | 1 | 1 |<br>| 2 | 2 | 2 |<br>| 3 | 3 | 3 |</p><hr><hr><hr><p>分割线测试</p></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL + Redis与redis-py的使用</title>
    <url>/2019/01/29/WSL-RedisAndRedis-py/</url>
    <content><![CDATA[<html><head></head><body><h1 id="WSL-Redis与redis-py的使用"><a href="#WSL-Redis与redis-py的使用" class="headerlink" title="WSL + Redis与redis-py的使用"></a>WSL + Redis与redis-py的使用</h1><p><em>本文章适用于有一定Linux基础的朋友，如果对Linux不熟悉的话，慢慢来，先学Linux命令-</em></p><h2 id="事情梗概"><a href="#事情梗概" class="headerlink" title="事情梗概"></a>事情梗概</h2><p>最近无事，整理电脑时候看见一个redis-5.0.2.tar.gz静静的躺在某个角落</p><p>想起本来要再Windows上试验一下Redis</p><p>解压缩之后，看到了<em>installserver. sh</em>，嗯，这货看来是Linux版本的</p><p>去官网看了一下，只有一个Download按钮，去查了查，作者觉得Windows太麻烦所以不打算开发</p><p>找了找，发现了<a href="https://github.com/MicrosoftArchive">Microsoft Archive</a>，竟然有<a href="https://github.com/MicrosoftArchive/redis">Windows版本的Redis</a>，看一下Release，嗯，Lastest Release是3.0.504,刚接触，啥也不知道，点了下载，然后一看发布的日期<strong>1 Jul 2016</strong>，玩个鬼头啊</p><p>整双系统吧，Rufus刻录完了Fedora，进BIOS关Secure Boot，安装时发现没分区，分区完了再装发现Fedora这货<code>***哔***</code>把EFI给我装硬盘没挂载到固态上，格式化分区重装，<strong>您所使用的分区无法挂载EFI<b style="color:red">（掀桌）</b></strong></p><p>折腾了两个小时，放弃了，想起了WSL，删除了msys2（为啥删我也不知道）</p><hr><h2 id="啰嗦了这么多，转向正题"><a href="#啰嗦了这么多，转向正题" class="headerlink" title="啰嗦了这么多，转向正题"></a>啰嗦了这么多，转向正题</h2><a id="more"></a><ul><li><p>启用WSL</p><p>Win + S - 启用或关闭Windows功能 - 适用于Linux的Windows子系统 - Microsoft Store - 搜索Linux - 在Windows上运行Linux</p><p>Ubuntu、openSUSE、SUSE、Debian、Kali Linux五种看个人喜好，本人选择的是Ubuntu</p></li><li><p>安装Redis</p><p>装好之后开始菜单打开Ubuntu，等待Install好后，设置username、password，修改源（可选，如果忍受得了官方源200kb/s的速度的话），本人用的是<a href="http://mirrors.ustc.edu.cn/help/ubuntu.html">中科大源</a></p><p>换源之后执行<code>sudo apt update</code>更新源，执行<code>sudo apt upgrade</code>更新一下软件包，然后使用<code>sudo apt install redis-server</code>安装redis</p></li><li><p>启用Redis</p><p>安装好之后<code>sudo vim /etc/redis/redis.conf</code>,为安全起见使用vim的<code>/bind</code>搜索到bind 127.0.0.1使用#注释，<code>/requirepass</code>搜索到密码并设置，守护进程<code>daemonize</code>设置为<code>yes</code>（未实验对于WSL来说是否有作用）</p><p>执行redis-server看到以下结果说明Redis安装成功，使用sudo service redis-server start启动Redis服务<br><img alt data-src="/images/wsl-redis/redis-server.png"></p></li><li><p>使用Redis</p><p>执行<code>redis-cli</code>，终端显示<code>127.0.0.1:6379</code>，端口号可以在redis.conf内更改，输入<code>ping</code>，提示<code>(error) NOAUTH Authentication required.</code>，使用<code>auth <你刚刚在redis.conf中设置的密码></code>，显示<code>OK</code>，输入<code>ping</code>，显示<code>PONG</code></p><p>环境搭建好了，现在该测试redis-py了，本人使用的是Anaconda环境，在Anaconda Prompt中输入<code>conda install redis-py</code>，等待安装完成，输入<code>python</code>进入Python环境，依次输入<code>import redis</code>、<code>r = redis.Redis(host='127.0.0.1',port=6379,db=0,password='你设置的密码')</code>、<code>r.set('test','redis-py test')</code>、<code>print(r.get('test'))</code>查看结果，或将这四句写入python的可执行脚本<br><img alt data-src="/images/wsl-redis/redis-test.png"></p></li></ul><blockquote><p>注意事项：</p><ul><li>由于WSL的特殊性，此方法每次需启动WSL输入sudo service redis-server start使用</li><li>可编写WSL的启动脚本，加入Windows的启动项，在此作为延伸不做实现</li><li><code>sudo systemctl enable redis-server</code>对于WSL无用，每次重启后Windows任务管理器内的WSL相关进程依然会消失</li><li></li></ul></blockquote></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL服务启动脚本</title>
    <url>/2019/04/14/WSLServiceScript/</url>
    <content><![CDATA[<html><head></head><body><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>对于Linux来说，部署环境比Windows便利很多，比如安装mysql、nginx等只需如<code>apt install mysql & apt install nginx</code>一条命令，但是个人又离不开Windows</p><p>对于WSL来说，很多人为了便利或者说偷懒，做了用PowerShell做了开机脚本和启动项，但是估计也有一部分人不算很愿意为了几个Linux服务，拖慢Windows的开机速度（虽然不一定有关系，除非你电脑真的很渣很渣😂）</p><p>所以呢，既然WSL是Linux（Windows是最好的Linux发行版！！！）</p><p>所以用shell脚本，启动服务也是可以的吧</p><a id="more"></a><blockquote><p>注：本文灵感来源于：<a href="https://blog.51cto.com/dgd2010/1617846">Linux手动启动、停止多个服务用的shell脚本</a></p></blockquote><p>不多说，贴出自己修改后的脚本，用于启动WSL中的mysql + ssh + rabbitmq-server + redis-server</p><p>其中SERVICE等变量可以修改为自己所需要的服务，若有多个服务，需在start()、stop()、status()中写入变量</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">SERVICE_1=mysql</span><br><span class="line">SERVICE_2=ssh</span><br><span class="line">SERVICE_3=rabbitmq-server</span><br><span class="line">SERVICE_4=redis-server</span><br><span class="line"></span><br><span class="line">function help(){</span><br><span class="line">	echo "Usage: $0{start|stop|status|help}"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function check_service_if_is_running(){</span><br><span class="line">	SERVICE=$1</span><br><span class="line">	service $SERVICE status > /dev/null</span><br><span class="line">	REVAL=$?</span><br><span class="line">	if [[ $REVAL -eq 0 ]]; then</span><br><span class="line">		return 0</span><br><span class="line">	else</span><br><span class="line">		return 1</span><br><span class="line">	fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function start_service_if_is_stoped(){</span><br><span class="line">	SERVICE=$1</span><br><span class="line">	service $SERVICE start > /dev/null</span><br><span class="line">	check_service_if_is_running $SERVICE</span><br><span class="line">	REVAL=$?</span><br><span class="line">	if [[ $REVAL -eq 0 ]]; then</span><br><span class="line">		echo $SERVICE is running...</span><br><span class="line">	else</span><br><span class="line">		echo $SERVICE is not running, error code is $REVAL.</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function stop_service_if_is_running(){</span><br><span class="line">	SERVICE=$1</span><br><span class="line">	service $SERVICE stop > /dev/null</span><br><span class="line">	check_service_if_is_running $SERVICE</span><br><span class="line">	REVAL=$?</span><br><span class="line">	if [[ $REVAL -eq 1 ]]; then</span><br><span class="line">		echo $SERVICE is stoped...</span><br><span class="line">	fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function status_service(){</span><br><span class="line">	SERVICE=$1</span><br><span class="line">	check_service_if_is_running $SERVICE</span><br><span class="line">	REVAL=$?</span><br><span class="line">	if [[ $REVAL -eq 0 ]]; then</span><br><span class="line">		echo $SERVICE is running...</span><br><span class="line">	else</span><br><span class="line">		echo $SERVICE is not running, error code is $REVAL.</span><br><span class="line">		exit 1</span><br><span class="line">	fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function start(){</span><br><span class="line">	start_service_if_is_stoped $SERVICE_1</span><br><span class="line">	start_service_if_is_stoped $SERVICE_2</span><br><span class="line">	start_service_if_is_stoped $SERVICE_3</span><br><span class="line">	start_service_if_is_stoped $SERVICE_4</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function stop(){</span><br><span class="line">	stop_service_if_is_running $SERVICE_4</span><br><span class="line">	stop_service_if_is_running $SERVICE_3</span><br><span class="line">	stop_service_if_is_running $SERVICE_2</span><br><span class="line">	stop_service_if_is_running $SERVICE_1</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">function status(){</span><br><span class="line">	status_service $SERVICE_1</span><br><span class="line">	status_service $SERVICE_2</span><br><span class="line">	status_service $SERVICE_3</span><br><span class="line">	status_service $SERVICE_4</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">case "$1" in </span><br><span class="line">	start)</span><br><span class="line">		start</span><br><span class="line">	;;</span><br><span class="line">	stop)</span><br><span class="line">		stop</span><br><span class="line">	;;</span><br><span class="line">	status)</span><br><span class="line">		status</span><br><span class="line">	;;</span><br><span class="line">	*)</span><br><span class="line">		help</span><br><span class="line">		exit 1</span><br><span class="line">	;;</span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><p>最后，贴上运行效果</p><p><img alt data-src="/images/wsl_service.png"></p></body></html>]]></content>
      <categories>
        <category>The Universe</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
</search>
